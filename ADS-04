#include<iostream>
using namespace std;

class tbtnode{

private:
    char data;
    bool rbit;
    bool lbit;
    tbtnode *rightc;
    tbtnode *leftc;
    friend class tbt;

public:
    tbtnode();

};

tbtnode::tbtnode(){

    lbit = 1;
    rbit = 1;
}

class tbt{

    tbtnode *head;

public:
    void create();
    void preorder();
    tbtnode *presuccr(tbtnode *temp);
    void inorder();
    tbtnode *insuccr(tbtnode *temp);
    tbt();
};

tbt::tbt(){

    head = new tbtnode();

    head->rbit = 0;

    head->leftc = head;
    head->rightc = head;

}

void tbt::create(){

    tbtnode *root = new tbtnode();
    char ck;
    char ch;

    cout<<"Enter the Data of Root: ";
    cin>>root->data;
    cout<<endl;

    head->lbit = 0;

    root->leftc = head;
    root->rightc = head;

    head->leftc = root;

    do{
        
        int flag;
        flag = 0;
        tbtnode *temp;

        temp = root;

        tbtnode *curr = new tbtnode();
        cout<<"Enter the current data: ";
        cin>>curr->data;

        curr->leftc = NULL;
        curr->rightc = NULL;

        while(flag==0){
           
            cout<<"Accept Choice 'l' for Left or 'r' for Right"<<endl;
            cin>>ch;

            if(ch=='l'){
                if(temp->lbit==1){
                    curr->rightc = temp;
                    curr->leftc = temp->leftc;
                    temp->leftc = curr;
                    temp->lbit = 0;

                    flag = 1;
                    
                }

                else{
                    temp = temp->leftc;
                }
            }

            if(ch=='r'){
                if(temp->rbit==1){
                    curr->leftc = temp;
                    curr->rightc = temp->rightc;
                    temp->rightc = curr;
                    temp->rbit = 0;

                    flag = 1;
                
                }

                else{
                    temp = temp->rightc;
                }
            }

            
        }
        cout<<"Press 'y' to enter more nodes"<<endl;
        cin >> ck;
    }while(ck=='y');
}

tbtnode *tbt::insuccr(tbtnode *temp){
    
    tbtnode *x = temp->rightc;

    if(temp->rbit==0){
        while(x->lbit==0){
            x = x->leftc;
        }
    }

    return x;
}

void tbt::inorder(){

    tbtnode *temp;
    temp = head;

    while(1){
        temp = insuccr(temp);

        if(temp==head)
            break;

        cout<<temp->data;
    }
}

void tbt::preorder(){

    tbtnode *temp = head->leftc;

    while(temp!=head){
        cout<<temp->data;

        while(temp->lbit!=1){
            temp = temp->leftc;
            cout<<temp->data;
        }

        while(temp->rbit==1){
            temp = temp->rightc;
        }
      temp = temp->rightc;

    }
}

void selection(tbt t1){
    int n;
    cout<<"Select the  display operation"<<endl;
    cout<<"1. Inorder display"<<endl;
    cout<<"2. Preorder display"<<endl;
    cout<<"3. EXIT"<<endl;
    cin>>n;
    switch(n)
    {
        case 1: t1.inorder();
                cout<<endl;
                selection(t1);
                break;

        case 2: t1.preorder();
                cout<<endl;
                selection(t1);
                break;

        case 3: break;
    }
}

int main(){
    tbt t1;
    t1.create();
    selection(t1);
}
