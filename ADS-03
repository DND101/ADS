//========================================================================
// Name        : ADS-03.cpp
// Author      : Naveen Sahu
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//========================================================================

#include <iostream>
#include <string.h>

using namespace std;

class Node {
char data[10];
Node* left;
Node* right;
friend class Tree;
};

class Queue {
int front, rear;
Node* data[30];

public:
Queue();
void push(Node*);
Node* pop();
bool isEmpty();
};

Queue::Queue() {
front = -1;
rear = -1;
}

void Queue::push(Node* val) {
++rear;
data[rear] = val;
}

Node* Queue::pop() {
++front;
return data[front];
}

bool Queue::isEmpty() {
return front == rear;
}

class Tree {
Node* root;

public:
Tree();
void create_nr();
void display();
int search_nr(char*);
void search_r();
int search_r(Node*, char*);
Tree copy_r();
Node* copy_r(Node*);

};

Tree::Tree() {
root = NULL;
}

void Tree::create_nr() {
root = new Node;
cout << "Enter root node: ";
cin >> root->data;
root->left = NULL;
root->right = NULL;

while (1) {
char ch;
cout << "Do you want to enter another node? (y/n) ";
cin >> ch;

if (ch != 'y')
break;

Node* curr = new Node;
cout << "Enter current node: ";
cin >> curr->data;
curr->left = NULL;
curr->right = NULL;

Node* temp = root;
while (1) {
int cmp = strcmp(curr->data, temp->data);
if (cmp < 0) {
if (temp->left != NULL)
temp = temp->left;
else {
temp->left = curr;
break;
}

} else {
if (temp->right != NULL)
temp = temp->right;
else {
temp->right = curr;
break;
}
}
}
}
}

void Tree::display() {
cout << endl;
Node* temp = root;
Queue q;
q.push(temp);
while (!q.isEmpty()) {
temp = q.pop();
cout << temp->data << " ";

if (temp->left != NULL)
q.push(temp->left);

if (temp->right != NULL)
q.push(temp->right);
}
cout << endl;
}

int Tree::search_nr(char* key) {
Node* temp = root;

while (temp != NULL) {
int cmp = strcmp(key, temp->data);
if (cmp == 0) {
return 1;
} else if (cmp < -1) {
temp = temp->left;
} else {
temp = temp->right;
}
}

return 0;
}

void Tree::search_r() {
char key[10];
cout << "Enter key to search in bst (recursive): ";
cin >> key;

if (search_r(root, key)) {
cout << key << " found" << endl;
} else {
cout << key << " not found" << endl;
}

}

int Tree::search_r(Node* temp, char* key) {
if (temp == NULL)
return 0;
int cmp = strcmp(key, temp->data);

if (cmp == 0)
return 1;

if (cmp < 0)
return search_r(temp->left, key);

return search_r(temp->right, key);
}

Tree Tree::copy_r()
{
        Tree newTree;
        newTree.root=copy_r(root);
       
        return newTree;
}

Node* Tree::copy_r(Node* temp)
{
        Node* curr=NULL;
       
        if (temp!=NULL){
                curr=new Node;
                strcpy(curr->data,temp->data);
                curr->left=copy_r(temp->left);
                curr->right=copy_r(temp->right);
         }
         return curr;
}



int main() {
Tree bst;

bst.create_nr();
bst.display();
Tree bst1=bst.copy_r();
bst1.display();

/*char key[10];
cout << "Enter key to search in bst (non-recursive): ";
cin >> key;

if (bst.search_nr(key)) {
cout << key << " found" << endl;
} else {
cout << key << " not found" << endl;
}

bst.search_r();*/

return 0;
}
